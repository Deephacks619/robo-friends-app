{"version":3,"sources":["Card.js","Cardarray.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","style","display","className","alt","src","this","props","id","name","email","React","Component","Cardarray","names","cardcomp","map","user","i","key","Search","searchChange","type","placeholder","onChange","App","state","searchfield","onsearchchange","bind","fetch","then","res","json","users","setState","event","target","value","filterrobots","filter","robots","toLowerCase","includes","length","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAwBeA,G,sLAdX,OACI,yBAAMC,MAJK,CACPC,QAAQ,WAIZ,yBAAKC,UAAU,4DACX,yBAAKC,IAAI,MAAMC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,cAClB,6BACA,4BAAKF,KAAKC,MAAME,MAChB,2BAAIH,KAAKC,MAAMG,c,GAZRC,IAAMC,YCUVC,EAVG,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACVC,EAASD,EAAME,KAAI,SAACC,EAAKC,GAC3B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIM,EAAMI,GAAGV,GAAIC,KAAMK,EAAMI,GAAGT,KAAMC,MAAOI,EAAMI,GAAGR,WAE/E,OACI,6BACKK,ICKEK,G,KAZD,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACZ,OACI,yBAAKlB,UAAU,OACX,2BAAOA,UAAU,qCAChBmB,KAAK,SACJC,YAAY,eACZC,SAAUH,OC0CTI,E,YA3CX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPZ,MAAM,GACNa,YAAY,IAEhB,EAAKC,eAAe,EAAKA,eAAeC,KAApB,gBANX,E,iFAQO,IAAD,OACfC,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAACG,GAAD,OACF,EAAKC,SAAS,CACVrB,MAAMoB,S,qCAIHE,GACX9B,KAAK6B,SAAS,CACVR,YAAYS,EAAMC,OAAOC,U,+BAGxB,IAAD,OACEC,EAAajC,KAAKoB,MAAMZ,MAAM0B,QAAO,SAAAC,GAC3C,OAAOA,EAAOhC,KAAKiC,cAAcC,SAAS,EAAKjB,MAAMC,YAAYe,kBAEjE,OAA+B,IAA5BpC,KAAKoB,MAAMZ,MAAM8B,OACT,wDAIX,yBAAKzC,UAAU,SACX,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAMF,MAAO,CAAC4C,WAAW,mBAAvC,eACA,kBAAC,EAAD,CAAQxB,aAAcf,KAAKsB,iBAC3B,8BAEJ,kBAAC,EAAD,CAAWd,MAAOyB,S,GAtCZ5B,IAAMC,WCKJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.42696461.chunk.js","sourcesContent":["import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport \"tachyons\";\r\n\r\nclass Card extends React.Component{\r\n   \r\n    render(){\r\n        let styles={\r\n            display:\"inline\"\r\n        }\r\n    return(\r\n        <div  style={styles} >\r\n        <div className='tc bg-light-green dib br4 pa3 ma3 grow bw3 shadow-5 w-11' >\r\n            <img alt='raj' src={`https://robohash.org/${this.props.id}?200x200`}/>\r\n            <div>\r\n            <h2>{this.props.name}</h2>\r\n            <p>{this.props.email}</p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n}\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardarray = ({names}) =>{\r\n    const cardcomp=names.map((user,i)=>{\r\n        return <Card key={i} id={names[i].id} name={names[i].name} email={names[i].email}/>\r\n    })\r\n    return (\r\n        <div>\r\n            {cardcomp}\r\n        </div>\r\n    );\r\n}\r\nexport default Cardarray;","import React from \"react\";\r\nimport './App.css'\r\n\r\nconst Search =({searchChange}) =>{\r\n    return(\r\n        <div className=\"box\">\r\n            <input className=\"tc bg-light-grey shadow-5 pa2 w-20\"\r\n             type='search'\r\n              placeholder=\"Search Robot\"\r\n              onChange={searchChange}\r\n              >\r\n              </input>\r\n        </div>\r\n    );\r\n}\r\nexport default Search;","import React from \"react\";\r\nimport Cardarray from \"./Cardarray\";\r\nimport Search from \"./Search\";\r\n//import { names } from './names';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            names:[],\r\n            searchfield:\"\"\r\n        }\r\n        this.onsearchchange=this.onsearchchange.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then((res)=>res.json())\r\n        .then((users)=>\r\n            this.setState({\r\n                names:users\r\n            })\r\n        )\r\n    }\r\n    onsearchchange(event){\r\n        this.setState({\r\n            searchfield:event.target.value\r\n        })\r\n    }\r\n    render(){\r\n        const filterrobots=this.state.names.filter(robots=>{\r\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if(this.state.names.length === 0){\r\n            return <h2>loading....  please wait</h2>\r\n        }\r\n        else{\r\n    return (\r\n        <div className=\"total\">\r\n            <div className=\"tc\">\r\n                <h1 className=\"ma0\" style={{fontFamily:\"sega logo font\"}}>ROBO SEARCH</h1>\r\n                <Search searchChange={this.onsearchchange} />  \r\n                <hr></hr>\r\n            </div>\r\n            <Cardarray names={filterrobots} /> \r\n        </div>\r\n\r\n    );\r\n}}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}